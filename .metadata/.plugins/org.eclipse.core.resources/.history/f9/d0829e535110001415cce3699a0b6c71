/*
 * Copyright (C) 2013 Manuel Peinado
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.example.test_viewpager02;

import info.androidhive.imageslider.helper.HttpPostAsyncTask;

import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Vector;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserFactory;

import android.annotation.SuppressLint;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.os.StrictMode;
import android.support.v7.view.ActionMode;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.Toast;

import com.manuelpeinado.multichoiceadapter.extras.actionbarcompat.MultiChoiceBaseAdapter;
import com.squareup.picasso.Picasso;


public class GalleryImageAdapter extends MultiChoiceBaseAdapter {

    protected static final String TAG = GalleryImageAdapter.class.getSimpleName();
    //private List<Building> buildings;
    
    HttpPostAsyncTask httpTask01;
    
    
    //php�� �Ѱ��ִ�  ���Ǻ�����
  	String name = null;	
  	String category = null;
  	String minprice = null;
  	String maxprice = null;
  	String mindate = null;
  	String maxdate = null;
  	String Rname = null;
  	//���ǰ����� url, name ����� ����
    int i = 0;	
	int j = 0;
	boolean inurl = false;
	boolean inname = false;
	String [] url  ;	
	String [] note = new String[100] ;	
	StringBuilder output = new StringBuilder();
    

    @SuppressLint("NewApi")
	public GalleryImageAdapter(Bundle savedInstanceState) {
        super(savedInstanceState);
       // this.buildings = buildings;
        
        
        // 추가 강제 네트워크 사용
		 if (android.os.Build.VERSION.SDK_INT > 9) {
		  StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy
		    .Builder().permitAll().build();
		  StrictMode.setThreadPolicy(policy);
		 }
		
		 
		 url = new String[100] ;
		 i = 0;
        
        
        InputStream is = null;
        
        try {
			is = sendData(name, category, minprice, maxprice, mindate, maxdate, Rname).getEntity().getContent();
			Log.d("GalleryImageAdapter","is = sendData(name,n);");
		} catch (IllegalStateException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (ClientProtocolException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		try {
			XmlPullParserFactory factory = XmlPullParserFactory.newInstance();
			XmlPullParser parser = factory.newPullParser();
			//������ ����� is�� �־����� 

			parser.setInput(is, null);//null�� ��� "UTF-8"�� ������
			int status = parser.getEventType(); //�ļ��� ù�ٹ�ġ

			j = 0;
			while (status != XmlPullParser.END_DOCUMENT) {//���������� ������ ��������

				// ���� �о���� �±װ� �������� �������� �б�
				switch (status) {
				case XmlPullParser.START_TAG:

					if (parser.getName().equals("url")) {	                 
						inurl = true;
					} 

					if (parser.getName().equals("name")) {	                 
						inname = true;
					} 
					break;

				case XmlPullParser.END_TAG:
					break;


				case XmlPullParser.TEXT:
					if(inurl) {
						url [i] = parser.getText();
						inurl = false;
						i++; 
					}

					if(inname) {
						note [j] = parser.getText();
						inname = false;
						j++; 
					}
					break;    

				}

				// ������ ���� �±׸� �а�, ���°��� ������
				status = parser.next();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
        
        
        
    }

    @Override
    public boolean onCreateActionMode(ActionMode mode, Menu menu) {
        MenuInflater inflater = mode.getMenuInflater();
        inflater.inflate(R.menu.my_action_mode, menu);
        return true;
    }

    @Override
    public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
        if (item.getItemId() == R.id.menu_share) {
            
            
             
            List<Long> positions = new ArrayList<Long>(getCheckedItems());     
            int slectnum = positions.size();
            Log.d("GalleryImageAdapter","slectnum "+slectnum);
            
            if(slectnum >3){            	
            	Toast.makeText(getContext(), "So much choices!", Toast.LENGTH_SHORT).show();            	
            }
            else if (slectnum == 3){
            	

	            long [] Checked = new long[slectnum];
	            
	            
	            for(int i=0 ; i<slectnum ; i++){
	            	
	            	Checked[i] = positions.get(i);
	            	Log.i("GalleryImageAdapter","Checked[i] "+Checked[i]);
	            	
	            }
	            
	          
				//make 3 ArrayList<Boolean>
				String [] alltem1 = new String [20];
				String [] alltem2 = new String [20];		
				String [] alltem3 = new String [20];
								
				
				for(int i=0 ; i<20 ; i++){
					alltem1[i]="0";	
					Log.i("GalleryImageAdapter","alltem1[i] "+alltem1[i]);
					
					alltem2[i]="0";
					alltem3[i]="0";
				}
				
				alltem1[i]="0";					
				alltem2[i]="0";
				alltem3[i]="0";
				
				Log.i("GalleryImageAdapter","alltem3[14] "+alltem3[14]);
				//Log.i("GalleryImageAdapter","alltem3[15]? "+alltem3[15]);
				
				
				alltem1[(int) Checked[0]]="1";
				alltem2[(int) Checked[1]]="1";
				alltem3[(int) Checked[2]]="1";
				
				
				Log.i("GalleryImageAdapter","alltem3 ");
				
				//send
				HttpPostAsyncTask httpTask01 = new HttpPostAsyncTask();
					
				httpTask01.execute(alltem1);
				
				Log.i("GalleryImageAdapter","execute(alltem1); ");
				HttpPostAsyncTask httpTask02 = new HttpPostAsyncTask();
				httpTask02.execute(alltem2);
				
				
				Log.i("GalleryImageAdapter","execute(alltem2); ");
				HttpPostAsyncTask httpTask03 = new HttpPostAsyncTask();
				httpTask03.execute(alltem3);
				
				Log.i("GalleryImageAdapter","execute(alltem3) ");
				
				
				
				Toast.makeText(getContext(), "Successfully Voted", Toast.LENGTH_SHORT).show();
				
				
            }
            else{
            	Toast.makeText(getContext(), "So less choices!", Toast.LENGTH_SHORT).show();            	
            }
                        
            return true;
        }
        if (item.getItemId() == R.id.menu_discard) {
            discardSelectedItems();
            return true;
        }
        return false;
    }

    private void discardSelectedItems() {
        // http://stackoverflow.com/a/4950905/244576
    	
    	
        List<Long> positions = new ArrayList<Long>(getCheckedItems());
        
        Log.i("GalleryImageAdapter","positions0 "+positions.get(0));
        
        Log.i("GalleryImageAdapter","positionsall "+positions);
        
        Collections.sort(positions, Collections.reverseOrder());
        for (long position : positions) {
           // buildings.remove((int)position);
        }
        finishActionMode();
    }

    @Override
    public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
        return false;
    }

    @Override
    public int getCount() {

    	Log.d("GalleryImageAdapter", "getCount() " + i);
		return (i);
    
    }

    public Object getItem(int position) {
		Log.d("GalleryImageAdapter", "getItem(int position) "+position);
		return position;
	}

    @Override
    public long getItemId(int position) {
        return position;
    }


    
    public View getViewImpl(int position, View convertView, ViewGroup parent) {

    	
    	Log.i("GalleryImageAdapter","getViewImpl ");
		
		
		if (convertView == null) {
            int layout = R.layout.gallery_item;
            LayoutInflater inflater = LayoutInflater.from(getContext());
            convertView = inflater.inflate(layout, parent, false);
        }
		
		
		ImageView imageView = (ImageView) convertView;
		
		
		Log.i("GalleryImageAdapter","imageView ");
		
		Picasso.with(convertView.getContext()).load(url[position]).into(imageView);
		
		/*
		// get product data from server
		HttpPost request = makeHttpPost( name, null, null, null, null, null, null, url[position] ) ;
		Log.i("GalleryImageAdapter","imageView ");
		
		
		HttpClient client = new DefaultHttpClient() ;
		HttpResponse response;
		
		Log.i("GalleryImageAdapter","response ");
		
		try {
			response = client.execute( request);
			InputStream is2 = response.getEntity().getContent();
			Bitmap bit = BitmapFactory.decodeStream(is2);        			
			imageView.setImageBitmap(bit);        			
			is2.close(); 
			
			Log.i("GalleryImageAdapter","setImageBitmap ");

		} catch (ClientProtocolException e) {
			// TODO Auto-generated catch block
			Log.i("GalleryImageAdapter","ClientProtocolException ");
			
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		
		
		Log.i("GalleryImageAdapter","success ");

*/
		
		 return imageView;
	} 
    
     

	private HttpResponse sendData(String name, String category, String minprice, String maxprice, String mindate, String maxdate, String Rname) throws ClientProtocolException, IOException {  
		// TODO Auto-generated method stub  
		HttpPost request = makeHttpPost( name, category, minprice, maxprice, mindate, maxdate, Rname, "http://ruucm.synology.me:5003/gallery01.php" ) ;  
		Log.d("GalleryImageAdapter","HttpPost request") ; 
		HttpClient client = new DefaultHttpClient() ;  
		Log.d("GalleryImageAdapter","new DefaultHttpClient(") ; 
		HttpResponse response = client.execute(request) ;  
		Log.d("GalleryImageAdapter","response") ; 
		return response ;  
	}  

	private HttpPost makeHttpPost(String $name, String $category, String $minprice, String $maxprice, String $mindate, String $maxdate, String $Rname, String $url) {  
		// TODO Auto-generated method stub  
		HttpPost request = new HttpPost( $url ) ;  
		Vector<NameValuePair> nameValue = new Vector<NameValuePair>() ;  
		nameValue.add( new BasicNameValuePair( "name", $name ) ) ;  
		nameValue.add( new BasicNameValuePair( "category", $category ) ) ;  
		nameValue.add( new BasicNameValuePair( "minprice", $minprice ) ) ;
		nameValue.add( new BasicNameValuePair( "maxprice", $maxprice ) ) ;
		nameValue.add( new BasicNameValuePair( "mindate", $mindate ) ) ;
		nameValue.add( new BasicNameValuePair( "maxdate", $maxdate ) ) ;
		nameValue.add( new BasicNameValuePair( "Rname", $Rname ) ) ;
		request.setEntity( makeEntity(nameValue) ) ;  
		return request ;  
	}  

	private HttpEntity makeEntity( Vector<NameValuePair> $nameValue ) {  
		HttpEntity result = null ;  
		try {  
			result = new UrlEncodedFormEntity( $nameValue ) ;  
		} catch (UnsupportedEncodingException e) {  
			// TODO Auto-generated catch block  
			e.printStackTrace();  
		}  
		return result ;  
	}

    
    
}




