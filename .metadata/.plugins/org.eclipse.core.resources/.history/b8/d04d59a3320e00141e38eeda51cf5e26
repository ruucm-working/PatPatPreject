package com.example.senddata;

import java.io.IOException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.protocol.HTTP;
import org.apache.http.util.EntityUtils;


import android.annotation.TargetApi;
import android.app.Activity;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.StrictMode;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;

public class Connect extends Activity{
	
	

	String [] txt = new String[100] ;	
	
	private EditText id = (EditText)findViewById(R.id.input01);
	private EditText password = (EditText)findViewById(R.id.input02);
	private EditText name = (EditText)findViewById(R.id.input03);
	private EditText phone =(EditText)findViewById(R.id.input04);
	//Button join = (Button)findViewById(R.id.join);
	
	
	
	@TargetApi(Build.VERSION_CODES.GINGERBREAD)
	public void onCreate(Bundle savedInstanceState) {
		
		Log.d("Connect","onCreate");
		
		 super.onCreate(savedInstanceState);
		 setContentView(R.layout.main);
		 
		 Log.d("Connect","setContentView");

		 // 추가 강제 네트워크 사용
		 if (android.os.Build.VERSION.SDK_INT > 9) {
		  StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy
		    .Builder().permitAll().build();
		  StrictMode.setThreadPolicy(policy);
		 }
		
	
		 	txt[0]=id.getText().toString();
		    Log.d("Connect","txt[0] "+txt[0]);
		    txt[1]=password.getText().toString();
		    txt[2]=name.getText().toString();
		    txt[3]=phone.getText().toString();

		  
		    
			
		 
	}
		    
	//send params			
	public void mOnClick(View v)
	{
		switch(v.getId())
		{
		
		case R.id.input:   

			txt[0]=id.getText().toString();
		    Log.d("Connect","txt[0] "+txt[0]);
		    txt[1]=password.getText().toString();
		    txt[2]=name.getText().toString();
		    txt[3]=phone.getText().toString();
		    Log.d("Connect","txt[3] "+txt[3]);
				
			break;  
		
		case R.id.send:    		
			HttpPostAsyncTask httpTask01 = new HttpPostAsyncTask();
			//List<String> params = new ArrayList<String>();
			
			httpTask01.execute(txt);	
			break;   
			
		}
	}
			

	
}




class HttpPostAsyncTask extends AsyncTask<String, Integer, Long>
{
 @Override
 protected Long doInBackground(String... params) {
  String id = params[0];
  Log.d("HttpPostAsyncTask","params[0] "+params[0]);
  String password = params[1];
  String name = params[2];
  String phone = params[3];
  Log.d("HttpPostAsyncTask","params[3] "+params[3]);
  
  try {
   HttpClient client = new DefaultHttpClient();
   String postUrl = "http://ruucm.synology.me:5003/edit02.php";
   HttpPost post = new HttpPost(postUrl);
   
   //전송될 데이터 값
   List params2 = new ArrayList();
   params2.add(new BasicNameValuePair("id", id));
   params2.add(new BasicNameValuePair("password", password));
   params2.add(new BasicNameValuePair("name", name));
   params2.add(new BasicNameValuePair("phone", phone));

   UrlEncodedFormEntity ent = 
    new UrlEncodedFormEntity(params2,HTTP.UTF_8);
   post.setEntity(ent);
   HttpResponse responsePost = client.execute(post);
   HttpEntity resEntity = responsePost.getEntity();
   
   if (resEntity != null) {
    Log.w("Response", EntityUtils.toString(resEntity));
   }

  } catch (MalformedURLException e) {
   //
  } catch (IOException e) {
   //
  }
  return null;
 }
}

