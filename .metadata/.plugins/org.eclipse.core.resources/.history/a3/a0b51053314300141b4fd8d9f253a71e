package ji.ruucm.android.vertical_view.fragment;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;

import ji.ruucm.android.vertical_view.AsyncTask01;
import ji.ruucm.android.vertical_view.R;
import android.content.Context;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.AlphaAnimation;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;

public class Frag03 extends Fragment  /*implements OnClickListener*/{
	
	
	
	
	
	
	
	EditText msg;
	
	//chat variable
	// 리스트뷰를 구성하는 리스트뷰와 어댑터 변수
    public static ExamAdapter m_adapter = null;
    public static ListView m_list = null;
 
    // 대화 상대방의 별명을 저장하는 변수
    private String m_user_name = "홍길동";
 
    // 시간및 날짜 출력시 사용할 포맷 객체 변수    
    private SimpleDateFormat m_date_format = null;
    public static SimpleDateFormat m_time_format = null;
	
	

	// public static TextPref fbPref;

	static boolean init;
	public static boolean lv0_1;
	static boolean lv0_2;
	public static boolean lv1;
	public static boolean lv2;
	public static boolean lv3_1;

	static View v;

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		
		
		
		
		
		
		v = inflater.inflate(R.layout.frag03, container, false);

		
		
		msg = (EditText) v.findViewById(R.id.message01);
		
		/*// 버튼에 리스너를 등록한다.
		Button btn = (Button) v.findViewById(R.id.btn1);

		btn.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {

				Chat_ExamData data = null;
				// 첫번째 버튼이 눌리면 상대방이 이야기하는 듯한 데이터를 구성한다.
				data = new Chat_ExamData((byte) 0, msg.getText().toString(),
						m_time_format.format(new Date()));
				
				// 어댑터에 데이터를 추가한다.
		        m_adapter.add(data);
		        // 추가된 영역으로 스크롤을 이동시킨다.
		        m_list.smoothScrollToPosition(m_adapter.getCount() - 1); 

			}
		});*/
		
		
		
		// 버튼에 리스너를 등록한다.
				Button btn2 = (Button) v.findViewById(R.id.btn2);

				btn2.setOnClickListener(new View.OnClickListener() {
					@Override
					public void onClick(View v) {

						Chat_ExamData data = null;
						// 첫번째 버튼이 눌리면 상대방이 이야기하는 듯한 데이터를 구성한다.
						data = new Chat_ExamData((byte)1, msg.getText().toString(),
								m_time_format.format(new Date()));
						
						// 어댑터에 데이터를 추가한다.
				        m_adapter.add(data);
				        // 추가된 영역으로 스크롤을 이동시킨다.
				        m_list.smoothScrollToPosition(m_adapter.getCount() - 1); 

					}
				});
		
		
		
				
				
				
				 // ExamData 객체를 관리하는 ArrayList 객체를 생성한다.
		        ArrayList<Chat_ExamData> data_list = new ArrayList<Chat_ExamData>();
		        // 사용자 정의 어댑터 객체를 생성한다.
		        m_adapter = new ExamAdapter(data_list);
		        
		        // 리스트를 얻어서 어댑터를 설정한다.
		        m_list = (ListView) v.findViewById(R.id.lvMessageList);
		        m_list.setAdapter(m_adapter);
		        
		        // 한국 기준의 시간으로 날짜의 출력 형태를 정의하여 객체를 생성한다.
		        m_date_format = new SimpleDateFormat("yyyy/MM/dd", Locale.KOREA);
		        m_time_format = new SimpleDateFormat("HH:mm:ss", Locale.KOREA);
				
				


		        
		        AsyncTask02 sendAutomessage = new AsyncTask02();
		        sendAutomessage.execute("");
		        
				

		return v;

	}
	
	

	
	
	
	
	
	
	// BaseAdapter 를 상속하여 어댑터 클래스를 재정의한다.
    public class ExamAdapter extends BaseAdapter 
    {
        private LayoutInflater m_inflater = null;
        // Chat_ExamData 객체를 관리하는 ArrayList
        private ArrayList<Chat_ExamData> m_data_list;
        
        public ExamAdapter(ArrayList<Chat_ExamData> items)
        {
            m_data_list = items;    
            // 인플레이터를 얻는다.
            m_inflater = (LayoutInflater) getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        }
        
        // ArrayList 에 Chat_ExamData 객체를 추가하는 메서드
        public void add(Chat_ExamData parm_data)
        {
            m_data_list.add(parm_data);
            // 데이터가 변화됨을 알려준다.
            notifyDataSetChanged();
        }
 
        // 어댑터에서 참조하는 ArrayList 가 가진 데이터의 개수를 반환하는 함수
        @Override
        public int getCount() 
        {
            return m_data_list.size();
        }
        
        // 인자로 넘어온 값에 해당하는 데이터를 반환하는 함수
        @Override
        public Chat_ExamData getItem(int position) 
        {
            return m_data_list.get(position);
        }
        
        // 인자로 넘어온 값에 해당하는 행 ID 를 반환하는 메서드
        @Override
        public long getItemId(int position) 
        {
            return position;
        }
        
        // 인자로 넘어온 값에 해당하는 뷰의 타입을 반환하는 메서드
        @Override
        public int getItemViewType(int position)
        {
            return m_data_list.get(position).type;
        }
        
        // getView 메서드로 생성될 수 있는 뷰의 수를 반환하는 메서드
        @Override
        public int getViewTypeCount()
        {
            return 3;
        }
 
        // 각 항목에 출력될 뷰를 구성하여 반환하는 메서드
        public View getView(int position, View convertView, ViewGroup parent)
        {
            View view = null;
            // 해당 항목의 뷰 타입을 얻는다.
            int type = getItemViewType(position);
            
            // convertView 뷰는 어댑터가 현재 가지고 있는 해당 항목의 뷰객체이다.
            // null 이 넘어오는 경우에만 새로 생성하고, 그렇지않은 경우에는 그대로 사용한다.
            if(convertView == null) {
                // 타입에 따라 각기 다른 XML 리소스로 뷰를 생성한다.
                switch(type) {
                    case 0 :
                        view = m_inflater.inflate(R.layout.chat_list_item1, null); 
                        break;
                    case 1 :
                        view = m_inflater.inflate(R.layout.chat_list_item2, null); 
                        break;
                    case 2 :
                        view = m_inflater.inflate(R.layout.chat_list_item3, null);
                        break;
                }
            } else {
                view = convertView;
            }
            
            // 요청하는 항목에 해당하는 데이터 객체를 얻는다.
            Chat_ExamData data = m_data_list.get(position);
            
            // 데이터가 존재하는 경우
            if(data != null) {
                // 뷰 타입에 따라 값을 설정한다.
                if(type == 0) {
                    TextView user_tv = null, msg_tv = null, date_tv = null;                    
                    user_tv = (TextView) view.findViewById(R.id.user_view1);
                    msg_tv = (TextView) view.findViewById(R.id.message_view1);
                    date_tv = (TextView) view.findViewById(R.id.date_view1); 
                    
                    // 이름, 메세지, 시간정보를 텍스트뷰에 설정한다.
                    user_tv.setText(m_user_name);
                    msg_tv.setText(data.data1);
                    date_tv.setText(data.data2);
                } else if(type == 1) {
                    TextView msg_tv = null, date_tv = null;                    
                    msg_tv = (TextView) view.findViewById(R.id.message_view2);
                    date_tv = (TextView) view.findViewById(R.id.date_view2);
                    // 메세지, 시간정보를 텍스트뷰에 설정한다.
                    msg_tv.setText(data.data1);
                    date_tv.setText(data.data2);                         
                } else if(type == 2) {
                    // 날짜정보를 텍스트뷰에 설정한다.
                    ((TextView)view).setText(data.data1);
                }
            }
            // 뷰를 반환한다.
            return view;            
        }
    }


	
}

