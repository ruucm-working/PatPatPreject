package com.example.test_viewpager02;

import info.androidhive.imageslider.helper.AppConstant;
import info.androidhive.imageslider.helper.Utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.util.TypedValue;

public class Building {
    public String name;
    public String height;
    public Drawable photo;
    
    
    

    public Building(String name, String height, Drawable photo) {
        this.name = name;
        this.height = height;
        this.photo = photo;
    }

    public static ArrayList<Building> createList(Context ctx) {
        Resources res = ctx.getResources();
        String[] names = res.getStringArray(R.array.names);
        String[] heights = res.getStringArray(R.array.heights);
        TypedArray icons = res.obtainTypedArray(R.array.photos);
        
        
        
        Utils utils;
        ArrayList<String> imagePaths = new ArrayList<String>();
        
        
        utils = new Utils(ctx);
        
    
        // loading all image paths from SD card
        imagePaths = utils.getFilePaths();
        
        
        
        float padding = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,
                AppConstant.GRID_PADDING, res.getDisplayMetrics());
 
        int columnWidth = (int) ((utils.getScreenWidth() - ((AppConstant.NUM_OF_COLUMNS + 1) * padding)) / AppConstant.NUM_OF_COLUMNS);
        
        
        
        
        
        ArrayList<Building> items = new ArrayList<Building>(names.length);
        for (int i = 0; i < names.length; ++i) {
        	
        	
        	Bitmap image = decodeFile(imagePaths.get(i), columnWidth,
        			columnWidth);
        	
            items.add(new Building(names[i], heights[i], new BitmapDrawable(image); )) ;
        }
        icons.recycle();
        return items;
    }
    
    
    
    public static Bitmap decodeFile(String filePath, int WIDTH, int HIGHT) {
        try {
 
            File f = new File(filePath);
 
            BitmapFactory.Options o = new BitmapFactory.Options();
            o.inJustDecodeBounds = true;
            BitmapFactory.decodeStream(new FileInputStream(f), null, o);
 
            final int REQUIRED_WIDTH = WIDTH;
            final int REQUIRED_HIGHT = HIGHT;
            int scale = 1;
            while (o.outWidth / scale / 2 >= REQUIRED_WIDTH
                    && o.outHeight / scale / 2 >= REQUIRED_HIGHT)
                scale *= 2;
 
            BitmapFactory.Options o2 = new BitmapFactory.Options();
            o2.inSampleSize = scale;
            return BitmapFactory.decodeStream(new FileInputStream(f), null, o2);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        return null;
    }
    
    
    
    
}
