/*******************************************************************************
 * Copyright 2011, 2012 Chris Banes.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
package com.example.test_viewpager02;

import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserFactory;

import android.annotation.SuppressLint;
import android.app.ActionBar.LayoutParams;
import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.StrictMode;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.Toast;

import com.handmark.pulltorefresh.extras.viewpager.PullToRefreshViewPager;
import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener;

public class PullToRefreshViewPagerActivity extends Activity implements OnRefreshListener<ViewPager> {

	private PullToRefreshViewPager mPullToRefreshViewPager;
	
	
	
	private ArrayList<Building> items;
	
	
	

	int currentitem;
	
	//php�� �Ѱ��ִ�  ���Ǻ�����
  	String name = null;	
  	String brand = null;
  	String minprice = null;
  	String maxprice = null;
  	String mindate = null;
  	String maxdate = null;
  	String Rname = null;
  	//���ǰ����� url, name ����� ����
    static int i = 0;
    int i2 = 0;
	int j = 0;
	boolean inurl = false;
	boolean inname = false;
	static String [] url = new String[100] ;	
	String [] note = new String[100] ;	
	StringBuilder output = new StringBuilder();
    
	
	
	
	@SuppressLint("NewApi")
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_ptr_viewpager);

		mPullToRefreshViewPager = (PullToRefreshViewPager) findViewById(R.id.pull_refresh_viewpager);
		mPullToRefreshViewPager.setOnRefreshListener(this);

		ViewPager vp = mPullToRefreshViewPager.getRefreshableView();
		
		items = Building.createList(this);
		vp.setAdapter(new SamplePagerAdapter(items));
		
		
		Intent intent = getIntent();
		
		currentitem = intent.getExtras().getInt("currentitem");		
		brand = Integer.toString(currentitem+1);
		
		//vp.setCurrentItem(currentnum);//초기 ViewPager의 페이지 설정
		
		
		
		
		 // 추가 강제 네트워크 사용
		 if (android.os.Build.VERSION.SDK_INT > 9) {
		  StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy
		    .Builder().permitAll().build();
		  StrictMode.setThreadPolicy(policy);
		 }
		
       
       
       InputStream is = null;
       
       try {
			is = sendData(name, brand, minprice, maxprice, mindate, maxdate, Rname).getEntity().getContent();
			Log.d("PullToRefreshViewPagerActivity","is = sendData(name,n);" + brand);
		} catch (IllegalStateException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (ClientProtocolException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		try {
			XmlPullParserFactory factory = XmlPullParserFactory.newInstance();
			XmlPullParser parser = factory.newPullParser();
			//������ ����� is�� �־����� 

			parser.setInput(is, null);//null�� ��� "UTF-8"�� ������
			int status = parser.getEventType(); //�ļ��� ù�ٹ�ġ

			j = 0;
			while (status != XmlPullParser.END_DOCUMENT) {//���������� ������ ��������

				// ���� �о���� �±װ� �������� �������� �б�
				switch (status) {
				case XmlPullParser.START_TAG:

					if (parser.getName().equals("url")) {	                 
						inurl = true;
					} 

					if (parser.getName().equals("name")) {	                 
						inname = true;
					} 
					break;

				case XmlPullParser.END_TAG:
					break;


				case XmlPullParser.TEXT:
					if(inurl) {
						url [i] = parser.getText();
						inurl = false;
						i++; 
					}

					if(inname) {
						note [j] = parser.getText();
						inname = false;
						j++; 
					}
					break;    

				}

				// ������ ���� �±׸� �а�, ���°��� ������
				status = parser.next();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
       
		
		
		
	}

	@Override
	public void onRefresh(PullToRefreshBase<ViewPager> refreshView) {
		new GetDataTask().execute();
	}

	static class SamplePagerAdapter extends PagerAdapter  {
		
		
		
		i2 = 2;
		
/*
		private static int[] sDrawables = { R.drawable.wallpaper, R.drawable.wallpaper, R.drawable.wallpaper,
				R.drawable.wallpaper, R.drawable.wallpaper, R.drawable.wallpaper };
*/
		
		

		private List<Building> buildings;
		
		public SamplePagerAdapter(List<Building> buildings) {
			Log.d("PullToRefreshViewPagerActivity", "SamplePagerAdapter " + i);
	        this.buildings = buildings;
	    }
		
		
		
		
		@Override
		public int getCount() {

			Log.d("PullToRefreshViewPagerActivity", "getCount() " + i);
			i2
			return (i2);
		
		}

		
		
		public Object getItem(int position) {
			Log.d("PullToRefreshViewPagerActivity", "getItem(int position) "+position);
			return position;
		}
		
		
		@Override
		public View instantiateItem(ViewGroup container, int position) {
			
			/*
			ImageView imageView = new ImageView(container.getContext());
			imageView.setImageResource(sDrawables[position]);

			// Now just add ImageView to ViewPager and return it
			container.addView(imageView, LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);

			return imageView;
			
			
			if (container.getContext() == null) {
	            int layout = R.layout.gallery_item;
	            LayoutInflater inflater = LayoutInflater.from(getContext());
	            container.getContext() = inflater.inflate(layout, container, false);
	        }
			
			
			*/
			

			
			/*
	        ImageView imageView = new ImageView(container.getContext());
	        Building building = getItem(position);
	        imageView.setImageDrawable(building.photo);
	        */
			
			
			
			ImageView imageView = new ImageView(container.getContext());
			
			
			Log.i("PullToRefreshViewPagerActivity","imageView ");
			
			
			// get product data from server
			HttpPost request = makeHttpPost( null, null, null, null, null, null, null, url[position] ) ;
			Log.i("PullToRefreshViewPagerActivity","imageView ");
			
			
			HttpClient client = new DefaultHttpClient() ;
			HttpResponse response;
			
			Log.i("PullToRefreshViewPagerActivity","response ");
			
			try {
				response = client.execute( request);
				InputStream is2 = response.getEntity().getContent();
				Bitmap bit = BitmapFactory.decodeStream(is2);        			
				imageView.setImageBitmap(bit);        			
				is2.close(); 
				
				Log.i("PullToRefreshViewPagerActivity","setImageBitmap ");

			} catch (ClientProtocolException e) {
				// TODO Auto-generated catch block
				Log.i("PullToRefreshViewPagerActivity","ClientProtocolException ");
				
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			
			
	        container.addView(imageView, LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
	        return imageView;
		}

		@Override
		public void destroyItem(ViewGroup container, int position, Object object) {
			container.removeView((View) object);
		}

		@Override
		public boolean isViewFromObject(View view, Object object) {
			return view == object;
		}
	}

	private class GetDataTask extends AsyncTask<Void, Void, Void> {

		
		
		@Override
	    protected void onPreExecute() {
	         
			Log.d("PullToRefreshViewPagerActivity","onPreExecute");
	    }
		
		@Override
		protected Void doInBackground(Void... params) {
			// Simulates a background job.
			Log.d("PullToRefreshViewPagerActivity","doInBackground");
			try {
				Thread.sleep(4000);
			} catch (InterruptedException e) {
			}
			
			
			
			return null;
		}
		
		@Override
	    protected void onProgressUpdate(Void... result) {
	    	
	    	Log.d("PullToRefreshViewPagerActivity","onProgressUpdate");
	    	
	    	
	    }

		@Override
		protected void onPostExecute(Void result) {
			Log.d("PullToRefreshViewPagerActivity","onPostExecute");
			mPullToRefreshViewPager.onRefreshComplete();
			super.onPostExecute(result);
			
			
			Toast.makeText(PullToRefreshViewPagerActivity.this, "더 많은 아이디어가 필요한거 같지 않아요?ㅋㅋ", Toast.LENGTH_SHORT).show();
			
		} 
	}
	
	
	private HttpResponse sendData(String name, String brand, String minprice, String maxprice, String mindate, String maxdate, String Rname) throws ClientProtocolException, IOException {  
		// TODO Auto-generated method stub  
		HttpPost request = makeHttpPost( name, brand, minprice, maxprice, mindate, maxdate, Rname, "http://ruucm.synology.me:5003/gallery02.php" ) ;  
		Log.d("PullToRefreshViewPagerActivity","HttpPost request") ; 
		HttpClient client = new DefaultHttpClient() ;  
		Log.d("PullToRefreshViewPagerActivity","new DefaultHttpClient(") ; 
		HttpResponse response = client.execute(request) ;  
		Log.d("PullToRefreshViewPagerActivity","response") ; 
		return response ;  
	}  

	private static HttpPost makeHttpPost(String $name, String $brand, String $minprice, String $maxprice, String $mindate, String $maxdate, String $Rname, String $url) {  
		// TODO Auto-generated method stub  
		HttpPost request = new HttpPost( $url ) ;  
		Vector<NameValuePair> nameValue = new Vector<NameValuePair>() ;  
		nameValue.add( new BasicNameValuePair( "name", $name ) ) ;  
		nameValue.add( new BasicNameValuePair( "brand", $brand ) ) ;  
		nameValue.add( new BasicNameValuePair( "minprice", $minprice ) ) ;
		nameValue.add( new BasicNameValuePair( "maxprice", $maxprice ) ) ;
		nameValue.add( new BasicNameValuePair( "mindate", $mindate ) ) ;
		nameValue.add( new BasicNameValuePair( "maxdate", $maxdate ) ) ;
		nameValue.add( new BasicNameValuePair( "Rname", $Rname ) ) ;
		request.setEntity( makeEntity(nameValue) ) ;  
		return request ;  
	}  

	private static HttpEntity makeEntity( Vector<NameValuePair> $nameValue ) {  
		HttpEntity result = null ;  
		try {  
			result = new UrlEncodedFormEntity( $nameValue ) ;  
		} catch (UnsupportedEncodingException e) {  
			// TODO Auto-generated catch block  
			e.printStackTrace();  
		}  
		return result ;  
	}
	
	

}
