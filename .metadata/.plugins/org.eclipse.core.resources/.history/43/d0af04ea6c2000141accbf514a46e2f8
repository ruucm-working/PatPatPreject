package com.exam.view;

import java.util.*;

import android.app.*;
import android.appwidget.*;
import android.content.*;
import android.graphics.*;
import android.os.*;
import android.util.*;
import android.view.*;
import android.widget.*;

import com.exam.*;
import com.exam.tab.Setting;
import com.exam.tab.coinBlockIntroActivity;

public class CoinBlockView {
	public static String INTENT_ON_CLICK_FORMAT = "com.gueei.mario.coinBlock.id.%d.click";
	public static String INTENT_OFTEN_FORMAT = "com.exam.view.INTENT_OFTEN_FORMAT";
	public static String INTENT_EVOLVE_FORMAT = "com.exam.view.INTENT_EVOLVE_FORMAT";
	public static String INTENT_INIT_FORMAT = "com.exam.view.INTENT_INIT_FORMAT";
	private static final int REFRESH_RATE = 40;
	public static Context Context = null;
	
	private volatile Set<IAnimatable> Children;
	private static CoinBlockView instance;
	
	private float density;
	private int cheight, cwidth;
	private long lastRedrawMillis = 0;
	public static int mWidgetId;
	
	//for evolve
	public static long second = 0;

	//UpdateThread
	UpdateThread thread2;

	//Async Task
	ViewAsyncTask asynctask = new ViewAsyncTask();

	//프레퍼런스 
	public static TextPref mPref;	
	public static TextPref fbPref;	

	//static variables
	public static ICoinBlockViewState state;

	static boolean init = false;
	public static boolean lv0_1;
	public static boolean lv0_2;
	public static  boolean lv1 ;
	public static  boolean lv2 ;

	public static int CliCountInit = 0 ;
	public static int CliCount0_1 = 0 ;
	public static int CliCount0_2 = 0;
	public static int CliCount1 = 0;
	public static int CliCount2 = 0;

	public CoinBlockView(Context context, int widgetId) {
		WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
		DisplayMetrics metrics = new DisplayMetrics();
		wm.getDefaultDisplay().getMetrics(metrics);

		density = metrics.density;
		cwidth = (int) (72 * metrics.density);
		cheight = cwidth;

		Children = new HashSet<IAnimatable>();
		mWidgetId = widgetId;

		//context for toast
		Context = context;
		
		try {
			mPref = new TextPref("mnt/sdcard/SsdamSsdam/textpref.pref");
		} catch (Exception e) { 
			e.printStackTrace();
		}      

		mPref.Ready();
		
		Log.d("CoinBlockView", "Ready"+init);

		init = mPref.ReadBoolean("initstate", false);	
		lv0_1 = mPref.ReadBoolean("lv0_1state", false);
		lv0_2 = mPref.ReadBoolean("lv0_2state", false);
		lv1 = mPref.ReadBoolean("lv1state", false);
		lv2 = mPref.ReadBoolean("lv2state", false);

		Log.d("CoinBlockView", "mPref.ReadBoolean"+init);

		mPref.EndReady();

		if (init)
			setState(new InitState(this));
		else if (lv0_1)
			setState(new Lv0_1State(this));
		else if (lv0_2)
			setState(new Lv0_2State(this));
		else if (lv1)
			setState(new Lv1State(this));
		else if (lv2)
			setState(new Lv2State(this));

		thread2 = new UpdateThread(mHandler2);
		thread2.start();
		thread2.onStart();

		
 
		
		instance = this;
		
		//coinBlockIntroActivity.UpdateIntroView();
		
		Log.d("CoinBlockView","coinBlockIntroActivity +   coinBlockIntroActivity.class ");

 

	}

	public static CoinBlockView getInstance() {
		return instance;
	}

	class UpdateThread extends Thread{
		Handler mHandler;
		boolean sns = false; //Thread를 통제하기 위한 boolean 값
		public void run() {
			while(true) {
				if(sns) {
					mHandler.sendEmptyMessage(0);
					try {
						Thread.sleep(3000);
					} catch(InterruptedException e) {}
				}
			}
		} 

		//생성자
		public UpdateThread(Handler handler) {
			mHandler = handler;
		}

		public void onStart() {
			sns = true;
		}

		public void onStop() {
			sns = false;
		}
	}

	static Handler mHandler2 = new Handler(){
		RemoteViews rviews = new RemoteViews(CoinBlockWidgetApp.getApplication().getPackageName(), R.layout.coin_block_widget);

		public void handleMessage(Message msg){
			try {
				mPref = new TextPref("mnt/sdcard/SsdamSsdam/textpref.pref");
			} catch (Exception e) { 
				e.printStackTrace();
			}

			mPref.Ready();

			init = mPref.ReadBoolean("initstate", false);	
			lv0_1 = mPref.ReadBoolean("lv0_1state", false);
			lv0_2 = mPref.ReadBoolean("lv0_2state", false);
			lv1 = mPref.ReadBoolean("lv1state", false);
			lv2 = mPref.ReadBoolean("lv2state", false);

			CliCountInit = mPref.ReadInt("clicountinit", 0);
			CliCount0_1 = mPref.ReadInt("clicount0_1", 0);
			CliCount0_2 = mPref.ReadInt("clicount0_2", 0);
			CliCount1 = mPref.ReadInt("clicount1", 0);
			CliCount2 = mPref.ReadInt("clicount2", 0);

			
			
			Log.d("tag8", Long.toString(second));
			second = coinBlockIntroActivity.taskTimer1.GetTime();

			if ( second == 0 && CliCountInit >=3 && init){
				updateEvolveIntent(rviews, CoinBlockWidgetApp.getApplication());
				init = false;
				mPref.WriteInt("dblclick", Setting.DblClickCount);			
				mPref.CommitWrite();
			}
			else if (second >= 10 && second <= 12 && CliCount0_1 >= 3 && lv0_1){
				updateEvolveIntent(rviews, CoinBlockWidgetApp.getApplication());
				lv0_1 = false;
			}
			else if ( CliCount0_2 >= 3  && lv0_2){
				updateEvolveIntent(rviews, CoinBlockWidgetApp.getApplication());
				lv0_2 = false;
			}
			else if (second >= 20 && second <= 22 && CliCount1 >= 3 && lv1){
				updateEvolveIntent(rviews, CoinBlockWidgetApp.getApplication());
				lv1 = false;
			}
			else if (second >= 30 && second <= 32 && CliCount2 >=3 && lv2){
				updateEvolveIntent(rviews, CoinBlockWidgetApp.getApplication());
				lv2 = false;
			}

			if(second >= 5 && second <=10 )			
				updateOftenIntent(rviews, CoinBlockWidgetApp.getApplication());	
			else if (second >= 12 && second <= 20)
				updateOftenIntent(rviews, CoinBlockWidgetApp.getApplication());
			else if (second >= 22 )
				updateOftenIntent(rviews, CoinBlockWidgetApp.getApplication());
		}
		
		
		mPref.EndReady();
		
		
	};
	
	public synchronized void addAnimatable(IAnimatable child)
	{
		Children.add(child);
	}

	public synchronized void removeAnimatable(IAnimatable child)
	{
		Children.remove(child);
	}

	public void createCoin() {
		Children.add(new CoinAnimation(density));
	}

	public static Context getContext() {
		return (CoinBlockWidgetApp.getApplication());
	}

	public float getDensity() {
		return density;
	}

	public int getmWidgetId() {
		return mWidgetId;
	}

	public void OnClick() {
		state.OnClick(this);
	}

	public void OnDblClick() {
		state.OnDblClick(this);
	}

	public void OnOften() {
		state.OnOften(this);
		//		/scheduleRedraw();
	}

	public void OnEvolve() {
		state.OnEvolve(this);
	}

	public void OnInit() {
		state.OnInit(this);
		Log.d("tag3", "state.OnInit");
	}

	public void OnWifiConnected() {
		state.OnWifiConnected(this);
		Log.d("WIFI", "Wifi On");
	}

	public void OnWifiDisconnected() {
		state.OnWifiDisconnected(this);
		Log.d("WIFI", "Wifi Off");
	}

	public void OnPlaneModeOn() {
		state.OnPlaneModeOn(this);
		Log.d("Plane", "Plane Mode Off");
	}

	public void OnPlaneModeOff() {
		state.OnPlaneModeOff(this);
		Log.d("Plane", "Plane Mode Off");
	}

	public void OnSMS() {
		state.OnSMSReceived(this);
		Log.d("SMS", "Get SMS");
	}

	public void OnPowerConnected() {
		state.OnPowerConnected(this);
		Log.d("POWER", "Power Connected");
	}

	public void OnPowerDisconnected() {
		state.OnPowerConnected(this);
		Log.d("POWER", "Power Disconnected");
	}
	
	public void OnUSBConnected() {
		state.OnUSBConnected(this);
		Log.d("USB", "USB Connected");
	}
	
	public void OnUSBDisconnected() {
		state.OnUSBDisconnected(this);
		Log.d("USB", "USB Disconnected");
	}

	public void OnHeadsetConnected() {
		state.OnHeadsetConnected(this);
		Log.d("HEADSET", "Headset Connected");
	}

	public void OnHeadsetDisconnected() {
		state.OnPowerConnected(this);
		Log.d("HEADSET", "Headset Disconnected");
	}

	public void Redraw(Context context) {
		RemoteViews rviews = new RemoteViews(context.getPackageName(), R.layout.coin_block_widget);
		Bitmap canvas = Bitmap.createBitmap(cwidth, cheight, Bitmap.Config.ARGB_8888);

		IAnimatable[] child = new IAnimatable[Children.size()];
		Children.toArray(child);

		for (int i = 0; i < child.length; i++) {
			child[i].Draw(canvas);
			if (child[i].AnimationFinished())
				Children.remove(child[i]);
		}

		state.Draw(this,canvas);
		rviews.setImageViewBitmap(R.id.block, canvas);
		updateClickIntent(rviews);

		AppWidgetManager.getInstance(context).updateAppWidget(mWidgetId, rviews);

		lastRedrawMillis = SystemClock.uptimeMillis();

		if (state.NeedRedraw() || Children.size() > 0)
			scheduleRedraw();
	}

	void scheduleRedraw() {
		long nextRedraw = lastRedrawMillis + REFRESH_RATE;
		nextRedraw = nextRedraw > SystemClock.uptimeMillis() ? nextRedraw :
			SystemClock.uptimeMillis() + REFRESH_RATE;
		scheduleRedrawAt(nextRedraw);
	}

	private  void scheduleRedrawAt(long timeMillis) {
		(new Handler()).postAtTime(new Runnable() {
			public void run() {
				Redraw(CoinBlockWidgetApp.getApplication());
			}
		}, timeMillis);
	}

	public  void setState(ICoinBlockViewState newState) {
		state = newState;
		scheduleRedraw();
	}
	
	public ICoinBlockViewState getState(){
		return state;
	}

	private void updateClickIntent(RemoteViews rviews)
	{
		Intent intent = new Intent(String.format(INTENT_ON_CLICK_FORMAT, mWidgetId));
		intent.setClass(getContext(), coinBlockWidgetProvider.class);
		intent.putExtra("widgetId", mWidgetId);
		PendingIntent pi = PendingIntent.getBroadcast(getContext(), 0, intent,
				PendingIntent.FLAG_UPDATE_CURRENT);
		rviews.setOnClickPendingIntent(R.id.widget, pi);
	}

	private static void updateOftenIntent(RemoteViews rviews, Context context) {
		// TODO Auto-generated method stub
		Intent intent = new Intent(String.format(INTENT_OFTEN_FORMAT, mWidgetId));
		intent.putExtra("widgetId2", mWidgetId);
		context.sendBroadcast(intent);
	}

	private static void updateEvolveIntent(RemoteViews rviews, Context context) {
		// TODO Auto-generated method stub				
		
		
		Log.d("CoinBlockView","state " + init+" "+lv0_1+" "+lv0_2+" "+lv1+" "+lv2 );
		
		Intent intent = new Intent(String.format(INTENT_INIT_FORMAT, mWidgetId));
		intent.putExtra("widgetId11", mWidgetId);		

		context.sendBroadcast(intent);

		Intent intent2 = new Intent(String.format(INTENT_EVOLVE_FORMAT, mWidgetId));
		intent2.putExtra("widgetId10", mWidgetId);				

		context.sendBroadcast(intent2);

		Log.d(coinBlockWidgetProvider.TAG," updateEvolveIntent(Remo(rviews);");
	}
}
