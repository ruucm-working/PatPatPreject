/*
 * Copyright (C) 2013 Manuel Peinado
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.example.test_viewpager02;

import info.androidhive.imageslider.helper.HttpPostAsyncTask;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import android.os.Bundle;
import android.support.v7.view.ActionMode;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.Toast;

import com.manuelpeinado.multichoiceadapter.extras.actionbarcompat.MultiChoiceBaseAdapter;


public class GalleryAdapter extends MultiChoiceBaseAdapter {

    protected static final String TAG = GalleryAdapter.class.getSimpleName();
    //private List<Building> buildings;
    
    HttpPostAsyncTask httpTask01;

    public GalleryAdapter(Bundle savedInstanceState) {
        super(savedInstanceState);
        //this.buildings = buildings;
    }

    @Override
    public boolean onCreateActionMode(ActionMode mode, Menu menu) {
        MenuInflater inflater = mode.getMenuInflater();
        inflater.inflate(R.menu.my_action_mode, menu);
        return true;
    }

    @Override
    public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
        if (item.getItemId() == R.id.menu_share) {
            
            
             
            List<Long> positions = new ArrayList<Long>(getCheckedItems());     
            int slectnum = positions.size();
            Log.d("GalleryAdapter","slectnum "+slectnum);
            
            if(slectnum >3){            	
            	Toast.makeText(getContext(), "So much choices!", Toast.LENGTH_SHORT).show();            	
            }
            else if (slectnum == 3){
            	

	            long [] Checked = new long[slectnum];
	            
	            
	            for(int i=0 ; i<slectnum ; i++){
	            	
	            	Checked[i] = positions.get(i);
	            	Log.i("GalleryAdapter","Checked[i] "+Checked[i]);
	            	
	            }
	            
	          
				//make 3 ArrayList<Boolean>
				String [] alltem1 = new String [15];
				String [] alltem2 = new String [15];		
				String [] alltem3 = new String [15];
								
				
				for(int i=0 ; i<15 ; i++){
					alltem1[i]="0";	
					Log.i("GalleryAdapter","alltem1[i] "+alltem1[i]);
					
					alltem2[i]="0";
					alltem3[i]="0";
				}
				
				Log.i("GalleryAdapter","alltem3[14] "+alltem3[14]);
				//Log.i("GalleryAdapter","alltem3[15]? "+alltem3[15]);
				
				
				alltem1[(int) Checked[0]]="1";
				alltem2[(int) Checked[1]]="1";
				alltem3[(int) Checked[2]]="1";
				
				
				Log.i("GalleryAdapter","alltem3 ");
				
				//send
				HttpPostAsyncTask httpTask01 = new HttpPostAsyncTask();
					
				httpTask01.execute(alltem1);
				
				Log.i("GalleryAdapter","execute(alltem1); ");
				HttpPostAsyncTask httpTask02 = new HttpPostAsyncTask();
				httpTask02.execute(alltem2);
				
				
				Log.i("GalleryAdapter","execute(alltem2); ");
				HttpPostAsyncTask httpTask03 = new HttpPostAsyncTask();
				httpTask03.execute(alltem3);
				
				Log.i("GalleryAdapter","execute(alltem3) ");
				
				
				
				Toast.makeText(getContext(), "Successfully Voted", Toast.LENGTH_SHORT).show();
				
				
            }
            else{
            	Toast.makeText(getContext(), "So less choices!", Toast.LENGTH_SHORT).show();            	
            }
                        
            return true;
        }
        if (item.getItemId() == R.id.menu_discard) {
            discardSelectedItems();
            return true;
        }
        return false;
    }

    private void discardSelectedItems() {
        // http://stackoverflow.com/a/4950905/244576
    	
    	
        List<Long> positions = new ArrayList<Long>(getCheckedItems());
        
        Log.i("GalleryAdapter","positions0 "+positions.get(0));
        
        Log.i("GalleryAdapter","positionsall "+positions);
        
        Collections.sort(positions, Collections.reverseOrder());
        for (long position : positions) {
           // buildings.remove((int)position);
        }
        finishActionMode();
    }

    @Override
    public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
        return false;
    }

    @Override
    public int getCount() {
        //return buildings.size();
    }

    @Override
    public Building getItem(int position) {
       // return buildings.get(position);
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @Override
    protected View getViewImpl(int position, View convertView, ViewGroup parent) {
        if (convertView == null) {
            int layout = R.layout.gallery_item;
            LayoutInflater inflater = LayoutInflater.from(getContext());
            convertView = inflater.inflate(layout, parent, false);
        }
        ImageView imageView = (ImageView) convertView;
        Building building = getItem(position);
        imageView.setImageDrawable(building.photo);
        return imageView;
    }
}